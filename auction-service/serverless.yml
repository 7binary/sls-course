service: auction-service

plugins:
  - serverless-pseudo-parameters # плагин подставлять sudo-параметры #{AWS::} в эти yml-конфиги

variablesResolutionMode: 20210326

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  stage: ${opt:stage, 'dev'} # окружение, по дефолту dev
  lambdaHashingVersion: 20201221
  region: eu-west-1
  environment: # для JS-кода станет доступна в process.env.AUCTIONS_TABLE_NAME
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
    MAIL_QUEUE_URL: ${self:custom.MailQueue.url}
    AUCTIONS_BUCKET_NAME: ${self:custom.AuctionsBucket.name}
  iam:
    role:
      statements:
        - ${file(iam/AuctionsTableIAM.yml):AuctionsTableIAM} # чтоб у Lambda-функции был доступ вписать в базу данных AuctionsTable
        - ${file(iam/MailQueueIAM.yml):MailQueueIAM} # доступ к отправке SQS-сообщения в ресурс MailQueue
        - ${file(iam/AuctionsBucketIAM.yml):AuctionsBucketIAM} # доступ записывать в S3 AuctionsBucket

resources: # AWS CloudFormation language
  Resources: # ресурс таблицы в базе данных DynamoDB + ресурс S3 bucket
    AuctionsTable: ${file(resources/AuctionsTable.yml):AuctionsTable}
    AuctionsBucket: ${file(resources/AuctionsBucket.yml):AuctionsBucket}
    AuctionsBucketPolicy: ${file(resources/AuctionsBucket.yml):AuctionsBucketPolicy}

functions:
  # create
  createAuction:
    handler: dist/index.createAuction # путь к обработчику.метод на экспорт
    events:
      - http:
          method: POST
          path: /auctions
          authorizer: ${self:custom.authorizer}

  # list
  getAuctions:
    handler: dist/index.listAuctions
    events:
      - http:
          method: GET
          path: /auctions
          authorizer: ${self:custom.authorizer}

  # find one
  getAuction:
    handler: dist/index.getAuction
    events:
      - http:
          method: GET
          path: /auctions/{id}
          authorizer: ${self:custom.authorizer}

  # bid one
  placeBid:
    handler: dist/index.placeBid
    events:
      - http:
          method: PATCH
          path: /auctions/{id}/bid
          authorizer: ${self:custom.authorizer}

  uploadAuctionPicture:
    handler: dist/index.uploadAuctionPicture
    events:
      - http:
          method: PATCH
          path: /auctions/{id}/picture
          authorizer: ${self:custom.authorizer}

  # process cron
  processAuctions: # sls invoke -f processAuctions -l
    handler: dist/index.processAuctions
    events:
      - schedule: rate(1 minute)

custom:
  authorizer: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:auth-service-${self:provider.stage}-auth
  AuctionsTable:
    name: !Ref AuctionsTable
    arn: !GetAtt AuctionsTable.Arn
  MailQueue:
    arn: ${cf:notification-service-${self:provider.stage}.MailQueueArn}
    url: ${cf:notification-service-${self:provider.stage}.MailQueueUrl}
  AuctionsBucket:
    name: zineof-auctions-bucket-${self:provider.stage}
